# This is a basic workflow to help you get started with Actions

name: Deploy Changes

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      job-type:
        type: choice
        description: Type of Action
        options:
          - Deployment
          - Validation
        required: true
      target-env:
        type: choice
        description: Select Target
        options:
          - Production
          - Sandbox
        required: true


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set env
        run: |
          
          echo "${{ github.event.inputs.job-type }}"
          echo "${{ github.event.inputs.target-env }}"
          
          if [ "${{ github.event.inputs.job-type }}" == "Deployment" ]; then
            echo "Deployment"
          else
            echo "Validation"
          fi

          endpoint = ""
          if [ "${{ github.event.inputs.target-env }}" == "Production" ]; then

            echo "Production"
            endpoint = "${{ secrets.SFDX_DEV_PLAYGROUND_AUTH }}"
          
          elif [ "${{ github.event.inputs.target-env }}" == "Sandbox" ]; then
  
            echo "Sandbox"
            endpoint = "${{ secrets.SFDX_DEV_PLAYGROUND_AUTH }}"
          else
            echo "No Endpoint found"
          fi
          echo $endpoint
          echo "ENDPOINT_ENV_AUTH=$endpoint" >> $GITHUB_ENV

      - name: Test
        run: echo $ENDPOINT_ENV_AUTH

      - uses: sfdx-actions/setup-sfdx@v1
        with:
          sfdx-auth-url: ${{ env.ENDPOINT_ENV_AUTH }}


      - name: Install Required Updates
        run: |
          echo "npm version"
          npm --version
          echo "node version"
          node --version
          
          echo "sfdx update"
          sfdx update

          echo "sfdx version"
          sfdx --version

          #echo "Installing sfdx"
          #sudo npm install sfdx-cli --global
          #sfdx --version
          
          #Uninstall SFDX
          #sfdx plugins:uninstall sfdx-git-delta
          
          echo "Installing delta"  
          echo y | sfdx plugins:install sfdx-git-delta

      - name: Setting up git env
        run: |
          git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
          git fetch --all
          git --no-pager diff --name-status origin/master

      - name: Generate Deployment Packages
        run: |
          sfdx sgd:source:delta --from origin/master --repo . --output . 
          echo "package/package.xml"
          cat package/package.xml
      - name: Convert Metadata
        run: |
          sfdx force:source:convert --manifest=package/package.xml --outputdir=convert
      - name: Run Test on Metadata
        #run: sfdx force:mdapi:deploy --deploydir=convert --testlevel=RunLocalTests --checkonly -w30
        #NoTestRun, RunLocalTests, RunAllTestsInOrg
        run: |
          cd ./convert
          #ls -all
          echo "Convert Package JSON for Deployment"
          cat package.xml
          cd ..
          #sfdx force:mdapi:deploy --deploydir=convert --testlevel=NoTestRun --checkonly -w30
          #https://developer.salesforce.com/docs/atlas.en-us.sfdx_cli_reference.meta/sfdx_cli_reference/cli_reference_force_source.htm#cli_reference_force_source_deploy
          #-c for checkonly
          
          
          echo "${{ github.event.inputs.job-type }} "
          echo "${{ github.event.inputs.target-env }} "
          
          if
          
          
          sfdx force:source:deploy -c -p "./convert" -l RunSpecifiedTests -r AccountManagerTest,AwesomeCalculatorTest -w 33 --verbose --loglevel fatal
